MODE = development
PORT = 5000
WEB_CONCURRENCY = 1

APP_NAME = livesnap
APP_DOMAIN = livesnap.app
APP_EMAIL = hello@livesnap.app

ELASTICEMAIL_API_KEY = 3AA969CE54B4D7885A21F00D892502D3696E8B7C5CA9E84DD1FEC2A19001F0FB1033E308648C5894887A4660EF4093F6

TOKEN_EXPIRY_MINUTES = 43200
CACHE_EXPIRY_SECONDS = 0

S3_ACCESS_KEY = AKIAXQ4UAES4V5EIXMFL
S3_SECRET_KEY = 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
S3_BUCKET = worldbankpayint
S3_REGION = us-east-2


GOOGLE_CLIENT_ID=992078024233-ilt68ao3fbek0ns1n1tngm6ok1b7e78n.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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
GOOGLE_CALLBACK_URL=http://localhost:5000/accounts/youtube/callback


REDIS_HOST=LiveSnap
REDIS_PORT=6379
REDIS_PASSWORD=fP77YVoyCO4Rdf0NCoNnVQdmFwi3Lex1
MODE=development

hello@bluecodetech.co
blueCodeAdmin@Up1

documentation: https://docs.google.com/document/d/1cDPbrQMStlhNYp82vAZwnUSTvUPYIFmVbwkYIDGT9eI/edit
trello:trello.com/b/BCIPHzti/live-snap
slack: https://app.slack.com/client/T02TDB8RFV2/C02TPMJ3Z7B
login credentials: https://docs.google.com/spreadsheets/d/1jVyKOHpdH6xLmFEtpCkuJBgV-in3YkqcwZ7Pc-pyBDk/edit#gid=0





   //GET https://www.googleapis.com/youtube/v3/videos

    app.get(`/${endpoint_directory}/${endpoint_category}/get_video`, async (request, response, next) => {
        try {  

            // token

            if (request.body.token) {

                const REDIRECT_URL = `${process.env.GOOGLE_CALLBACK_URL}`;

                let payload = {
                    is_verified: false,
                    is_blocked: false,
                    is_registered: false,
                    token: request.body.token
                }

                let userExists = await USER.find({ token: request.body.token})
                
                if (!functions.empty(userExists)) {

                    userExists = Array.isArray(userExists)? userExists[0] : userExists;

                    // Check if token has expired
                    const difference = Math.abs(dateUtil.differenceInMinutes(new Date(userExists.token_expiry), new Date()))
                    if (difference > process.env.TOKEN_EXPIRY_MINUTES) {
                        payload["is_verified"] = functions.stringToBoolean(userExists.is_verified)
                        payload["is_blocked"] = functions.stringToBoolean(userExists.is_blocked)
                        payload["is_registered"] = functions.stringToBoolean(userExists.is_registered)
                        throw new Error("This user authentication token has expired, login again retry.")
                    }

                    var url = 'https://www.googleapis.com/oauth2/v4/token';
                    var body = {
                        "grant_type": "refresh_token",
                        "refresh_token": userExists.google_refresh_token,
                        "client_id": process.env.GOOGLE_CLIENT_ID,
                        "client_secret": process.env.GOOGLE_CLIENT_SECRET
                    };

                    request_url.post(url, {form: body, json: true}, async (err, res, body) => {
                        
                        const oauth2Client = new google.auth.OAuth2(
                            process.env.GOOGLE_CLIENT_ID,
                            process.env.GOOGLE_CLIENT_SECRET,
                            `${REDIRECT_URL}`
                        );
                            
                        oauth2Client.setCredentials({
                            refresh_token: body.refresh_token,
                            access_token: body.access_token,
                        });
                        
                            //update the user access token and refresh token
                            await USER.updateOne({token: request.body.token}, {
                                $set: {
                                    google_access_token: body.access_token,
                                    google_refresh_token: body.refresh_token,
                                }
                            });

                        const youtube = google.youtube({
                            version: 'v3',
                            auth: oauth2Client,
                        });

                        const res1 = await youtube.videos.list({
                            part: 'snippet,contentDetails,statistics',
                            id: request.body.video_id,
                        });

                        response.status(200).json({ "status": 200, "message": "Youtube video get response.", "data": res1.data })

                    });

                } else {
                    response.status(400).json({ "status": 400, "message": "User account access authentication credentials failed, check and retry.", "data": payload });
                }

            } else {
                response.status(400).json({ "status": 400, "message": "Incomplete or missing requests parameter(s)", "data": null });
            }

        } catch (error) {
                response.status(400).json({ "status": 400, "message": error.message, "data": null });
            }

    })

    //POST https://www.googleapis.com/upload/youtube/v3/videos

    app.post(`/${endpoint_directory}/${endpoint_category}/upload_video`, async (request, response, next) => {
        try {  

            // token

            if (request.body.token) {

                const REDIRECT_URL = `${process.env.GOOGLE_CALLBACK_URL}`;

                let payload = {
                    is_verified: false,
                    is_blocked: false,
                    is_registered: false,
                    token: request.body.token
                }

                let userExists = await USER.find({ token: request.body.token})
                
                if (!functions.empty(userExists)) {

                    userExists = Array.isArray(userExists)? userExists[0] : userExists;

                    // Check if token has expired
                    const difference = Math.abs(dateUtil.differenceInMinutes(new Date(userExists.token_expiry), new Date()))
                    if (difference > process.env.TOKEN_EXPIRY_MINUTES) {
                        payload["is_verified"] = functions.stringToBoolean(userExists.is_verified)
                        payload["is_blocked"] = functions.stringToBoolean(userExists.is_blocked)
                        payload["is_registered"] = functions.stringToBoolean(userExists.is_registered)
                        throw new Error("This user authentication token has expired, login again retry.")
                    }

                    var url = 'https://www.googleapis.com/oauth2/v4/token';
                    var body = {
                        "grant_type": "refresh_token",
                        "refresh_token": userExists.google_refresh_token,
                        "client_id": process.env.GOOGLE_CLIENT_ID,
                        "client_secret": process.env.GOOGLE_CLIENT_SECRET
                    };

                    request_url.post(url, {form: body, json: true}, async (err, res, body) => {
                        
                        const oauth2Client = new google.auth.OAuth2(
                            process.env.GOOGLE_CLIENT_ID,
                            process.env.GOOGLE_CLIENT_SECRET,
                            `${REDIRECT_URL}`
                        );

                        oauth2Client.setCredentials({
                            refresh_token: body.refresh_token,
                            access_token: body.access_token,
                        });

                        const youtube = google.youtube({
                            version: 'v3',
                            auth: oauth2Client,
                        });

                        const res1 = await youtube.videos.insert({
                            part: 'snippet,status',
                            resource: {
                                snippet: {
                                    title: request.body.title,
                                    description: request.body.description,
                                    tags: request.body.tags,
                                    categoryId: request.body.category_id,
                                },
                                status: {
                                    privacyStatus: request.body.privacy_status,
                                }
                            },
                            media: {
                                body: request.body.video_file
                            }
                        });
                        response.status(200).json({ "status": 200, "message": "Youtube video upload response.", "data": res1.data })
                    });

                } else {
                    response.status(400).json({ "status": 400, "message": "User account access authentication credentials failed, check and retry.", "data": payload });
                }

            } else {
                response.status(400).json({ "status": 400, "message": "Incomplete or missing requests parameter(s)", "data": null });
            }

        } catch (error) {
                response.status(400).json({ "status": 400, "message": error.message, "data": null });
            }

    })